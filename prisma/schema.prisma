//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  OWNER
  MANAGER
  CONTRACTOR
}

enum JobStatus {
  PENDING_REVIEW
  AVAILABLE
  CLAIMED
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

model User {
  id                String         @id() @default(uuid())
  email             String         @unique()
  type              UserType
  jobs              Job[]          @relation("OwnerJobs")
  contractorOn      Job[]          @relation("ContractorJobs")
  managerLocation   Location?      @relation("ManagerLocation", fields: [managerLocationId], references: [id])
  managerLocationId String?
  organisations     Organisation[] @relation("UserOrganisations")
  jobHistories      JobHistory[]   @relation("UserJobHistories")
}

model Job {
  id           String       @id() @default(uuid())
  title        String
  description  String
  status       JobStatus    @default(PENDING_REVIEW)
  owner        User         @relation("OwnerJobs", fields: [ownerId], references: [id])
  ownerId      String
  contractor   User?        @relation("ContractorJobs", fields: [contractorId], references: [id])
  contractorId String?
  location     Location?    @relation(fields: [locationId], references: [id])
  locationId   String?
  jobHistories JobHistory[] @relation("JobJobHistories")
}

model Organisation {
  id        String     @id() @default(uuid())
  name      String
  owner     User?      @relation("UserOrganisations", fields: [ownerId], references: [id])
  ownerId   String?
  locations Location[]
}

model Location {
  id             String       @id() @default(uuid())
  name           String
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  jobs           Job[]
  managers       User[]       @relation("ManagerLocation")
}

model JobHistory {
  id        String   @id() @default(uuid())
  job       Job      @relation("JobJobHistories", fields: [jobId], references: [id])
  jobId     String
  user      User     @relation("UserJobHistories", fields: [userId], references: [id])
  userId    String
  action    String
  createdAt DateTime @default(now())
}
